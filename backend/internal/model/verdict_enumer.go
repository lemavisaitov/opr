// Code generated by "enumer -type=Verdict -trimprefix=Status -json -sql"; DO NOT EDIT.

package model

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _VerdictName = "CleanMalicious"

var _VerdictIndex = [...]uint8{0, 5, 14}

const _VerdictLowerName = "cleanmalicious"

func (i Verdict) String() string {
	if i < 0 || i >= Verdict(len(_VerdictIndex)-1) {
		return fmt.Sprintf("Verdict(%d)", i)
	}
	return _VerdictName[_VerdictIndex[i]:_VerdictIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VerdictNoOp() {
	var x [1]struct{}
	_ = x[Clean-(0)]
	_ = x[Malicious-(1)]
}

var _VerdictValues = []Verdict{Clean, Malicious}

var _VerdictNameToValueMap = map[string]Verdict{
	_VerdictName[0:5]:       Clean,
	_VerdictLowerName[0:5]:  Clean,
	_VerdictName[5:14]:      Malicious,
	_VerdictLowerName[5:14]: Malicious,
}

var _VerdictNames = []string{
	_VerdictName[0:5],
	_VerdictName[5:14],
}

// VerdictString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VerdictString(s string) (Verdict, error) {
	if val, ok := _VerdictNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VerdictNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Verdict values", s)
}

// VerdictValues returns all values of the enum
func VerdictValues() []Verdict {
	return _VerdictValues
}

// VerdictStrings returns a slice of all String values of the enum
func VerdictStrings() []string {
	strs := make([]string, len(_VerdictNames))
	copy(strs, _VerdictNames)
	return strs
}

// IsAVerdict returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Verdict) IsAVerdict() bool {
	for _, v := range _VerdictValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Verdict
func (i Verdict) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Verdict
func (i *Verdict) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Verdict should be a string, got %s", data)
	}

	var err error
	*i, err = VerdictString(s)
	return err
}

func (i Verdict) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Verdict) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Verdict: %[1]T(%[1]v)", value)
	}

	val, err := VerdictString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
